【コマンド】

・cd <パス名>
又は"chdir"
ディレクトリの変更、パス名省略でカレントディレクトリのパスを出力
"\" で先頭に戻る
".."で一つ前のディレクトリに移動
"*"で途中の文字を省略

・dir <パス名>
指定パスのディレクトリ一覧を表示
パス名省略でカレントディレクトリの情報を表示

・tree <パス名>
ディレクトリをツリー形式で表示

・copy <コピー元ファイル名> <コピー先ファイル名>
パス省略でカレントディレクトリがコピー対象

・copy nul <ファイル名>
又は"type nul > <ファイル名>"
空のファイルを作成する

・del <削除ファイル名>
ファイルを削除、パス先も指定できる

・md <ディレクトリ名>
又は"mkdir"
ディレクトリ作成、パス先も指定できる

・rd <ディレクトリ名>
又は"rmdir"
ディレクトリを削除、パス先も指定できる

・ren <変更前の名前> <変更後の名前>
名前を変更、パス先も指定できる

・cls
コマンド画面をクリア

・type <ファイル名>
ファイルの内容を表示

・more <ファイル名>
ファイルの内容を1行又は1画面ずつ表示

・ipconfig
IPアドレスを確認

・exit
コマンドプロンプトを終了

・F7キー
それまでに入力したコマンド一覧を表示

・Ctrl+C
処理を中断

・explorer .
カレントディレクトリをエクスプローラーで開く

・シンボリックリンク作成
mklink <作成ファイル名> <リンク先ターゲットのファイル名>
mklink /D <作成フォルダ名> <リンク先ターゲットのフォルダ名>
フォルダへのシンボリックリンクを作成
削除するときは普通のファイルやフォルダと同じ

・ファイル同期
"robocopy /?"で詳細を確認
robocopy "<コピー元>" "<コピー先>" <オプション>

・ファイルの差分を検出
fc (オプション) <ファイル1> <ファイル2>



【Gitコマンド】
・git init
カレントディレクトリをGitの管理下に置く

・git status
ワークツリーとインデックスの状態を表示
HEADの状態とステージングの状態の差を確認

・git add <ファイル名>
ファイルをインデックスに登録
ファイル名はスペース区切りで複数選択可
"."ですべてのファイルを選択

・git commit -m "<コメント>"
コミットする
"-m"の後ろに"--amend"を入れると直前のコミットの修正が可能、上書きコミットできる

・git log
リポジトリの変更履歴を確認
"--graph --oneline"を付けると履歴の流れを表示
//リモートリポジトリのコミットを確認
"git fetch"→"git log --oneline origin/master -2(出力する数)"

・git remote add <名前> <URL>
リモートリポジトリに名前を付けて登録
デフォルト名は"origin"
"-u"オプション：次回以降push時にリポジトリとブランチ名を省略可

・git push <リポジトリ> <ブランチ>
プッシュ先のリポジトリとブランチを指定してコミットをプッシュ
引数なしの場合はカレントブランチが対象となる
"-u"または"--set-upstream"オプション：次回以降push時にリポジトリとブランチ名を省略可

・git clone <リポジトリのURL> <複製先のディレクトリ名>
リモートリポジトリを複製し、カレントディレクトリにローカルリポジトリとして新たに作成
複製先のディレクトリはあらかじめ作っておきその名前を指定する
"git clone -l -s -n . <ディレクトリ名>": ローカルリポジトリをクローン、現在のブランチのみを複製

・git pull <リポジトリ> <ブランチ>
"fetch"+"merge origin/master(リモート追跡ブランチ)"
リポジトリ名を省略するとoriginに対してプルを行う
引数なしの場合はカレントブランチが対象となる
ローカルで何も変更していない場合: 早送りマージで更新
ローカルで変更があった場合      : マージで更新(競合あり)
"git pull --rebase": fetch+rebase

・git branch <ブランチ名>
ブランチを作成
ブランチ名省略でブランチの一覧を表示
"git branch -r"でリモート(追跡)ブランチの一覧を表示
"git branch -a"でリモート(追跡)とローカルブランチの両方を表示
"git branch -d <ブランチ名>"でブランチを削除、"-d"を"-D"にするとマージ済みか否かを問わず強制削除
"git push --delete origin <ブランチ名>"または"git push origin :<ブランチ名>"でリモートブランチを削除
※"git fetch -p"で、リモートで削除済みのブランチもローカルに反映される
"git branch -m <古いブランチ名> <新しいブランチ名>"でブランチ名を変更

・git checkout <ブランチ名>
作業するブランチを切り替える
チェックアウト後の変更は移動後のブランチに追加される
"-b"オプション：ブランチ作成も同時に行う
"-f"オプション：作業ツリーの変更内容を破棄して強制的にブランチを切り替える

・git checkout <コミットハッシュID> <ファイル名>
ワークスペースを指定したコミットの状態にする
ハッシュID省略又は"HEAD"で、最新のコミットの状態にする
※ハッシュ
HEAD       : 直前のコミット
FETCH_HEAD : リモートブランチの最新のコミット
ORIG_HEAD  : 最新の一つ手前のコミット

・git stash
//"git stash save"
コミットしていないの変更内容を一時的に退避
ワークスペースは最後にコミットした状態になる
//"git stash list"
これまでに退避した作業の一覧を表示
スタッシュ名と退避したときのブランチとコミットを表示
//"git stash show <スタッシュ名>"
指定したスタッシュの詳細を表示
//"git stash apply <スタッシュ名>"
スタッシュにある変更を復活、復活後も残る
//"git stash pop <スタッシュ名>"
スタッシュにある変更を復活、復活後は残らない
//"git stash drop <スタッシュ名>"
指定したスタッシュの削除
//"git stash clear"
スタッシュリストがすべて削除

・git merge <ブランチ名>
fast-foward(早送り): 現在のブランチを指定したブランチに進める
non fast-foward    : 指定したブランチを現在のブランチに取り込みマージコミットを作成
競合が発生したら、修正→add→commit
"--no-ff"オプションを使うとマージコミットを意図的に作成できる
※優先するブランチを決める
マージ後に
"git checkout --ours <ファイル名>"  : 現在のブランチを優先
"git checkout --theirs <ファイル名>": マージ対象のブランチを優先
※マージの取り消し
マージ失敗："git merge --abort"
マージ成功："git reset --hard"
マージ後は使わないブランチを削除するのがよい
※エラー"refusing to merge unrelated histories"となるとき
"git merge --allow-unrelated-histories origin/master"でいけるらしい

・git rebase <ブランチ名>
現在のブランチをリベースして指定したブランチの履歴に一本化する
競合が発生したら、修正→add→"git rebase --continue"→(早送り)マージ
リベース自体を取り消す場合は<ブランチ名>に"--abort"を書く

・git fetch
リモート追跡ブランチを更新する(origin/branchA等)
リモートブランチ名も指定できる
チェックアウトしているブランチにマージしない
無名のブランチとして取り込まれ、"FETCH_HEAD"の名前でチェックアウトできる
//ローカルにないリモートブランチの取得: git fetch→git checkout <ブランチ名>
//ローカルに既にある場合はマージやプルやリベースを行う必要がある

・git reset <コミットハッシュ値> <ファイル名>
"."ですべてのファイルを選択
//"--soft"
HEADの位置のみを指定場所に戻す
ワーキングスツリーやステージングは残る、コミットのみの取り消し
//"--mixed"又は何もつけない
HEADとステージングを指定場所に戻す
指定したファイルをステージングから除く、addの取り消し
//"--hard"
作業ディレクトリもすべて戻す
ワーキングツリーの変更は失われる、コミットを完全に取り消し
"git reset --hard ORIG_HEAD"で最新の状態に戻る
//コミットハッシュ値
HEAD^, @^, HEAD~   : 一つ前のコミット
HEAD^^, HEAD~~, @^^: 二つ前のコミット
HEAD~{n},HEAD@{n}  : n個前のコミット

・git diff
差分を確認
//リモートとの変更
"git diff HEAD.. <origin(リモート名)/branch(ブランチ名)>"
又は"git diff <origin(リモート名)/branch(ブランチ名)>..HEAD"
//addする前でステージングとワークスペースの変更点
"git diff"
//addした後で最新のコミットとの変更点
"git diff --cached"又は"git diff --staged"
//コミットした後で前回のコミットとの変更
"git diff HEAD^"又は"git diff HEAD^..HEAD"
//コミット同士の比較
"git diff <コミットハッシュ値A>..<コミットハッシュ値B>"
//ブランチの比較
"git diff <ブランチA>..<ブランチB>"
//特定のファイルの比較(add前との比較)
"git diff -- <ファイルのパス>"
//特定のファイルの比較(ブランチ同士の比較)
"git diff <ブランチA> <ブランチB> -- <ファイルのパス>"
//別ファイル同士の比較
"git diff -- <ファイルのパスA> <ファイルのパスB>"
//マージ前の状態を現在(マージ後)の状態と比較
"git diff --ours"
//マージ相手のブランチのファイルの変更を比較
"git diff --theirs"
//マージの相手と自分の両方からの変更を確認
"git diff --base"
※オプション
"--stat"     : ファイルごとにどれくらい変更したかをざっと確認
"--name-only": 変更があったファイル名のみを表示
"-w"         : 改行や空白を無視する
※「":" + "q"」で次のコマンドが打てるようになる

・git gc
どこからも参照されない不要なオブジェクトを削除できる

・git reflog
参照ログ、過去のブランチやHEADの動きの履歴を表示
コミットを復活できる

・gitignore
gitの管理対象から外す
すでに一度add済みの場合: "git rm --cached <ファイル名>"を行う
※参照→ http://www-creators.com/archives/1662

・git rm --cached <ファイル名>
ファイルをgitの管理対象から除外する
"--cached"を付けないとファイルごと削除する
フォルダの場合は"-r"オプションを付ける
※現在のディレクトリごと外す場合は"rm -rf .git"
                       Windowsなら"rmdir /s .git"